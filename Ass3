Title: - Create Binary Search Tree and perform basic operations on it
Problem Statement: Beginning with an empty binary search tree, Construct binary search tree by inserting
the values in the order given. After constructing a binary tree -
i. Insert new node
ii. Find number of nodes in longest path
iii. Minimum data value found in the tree
iv. Change a tree so that the roles of the left and right pointers are swapped at every node
v. Search a value



#include <iostream>
using namespace std;

class node {
public:
    int data;
    node* left;
    node* right;
};

class bst {
public:
    node* root;
    bst() {
        root = NULL;
    }
    void create();
    void insert();
    void postorder(node*);
    void inorder(node*);
    void preorder(node*);
    void search(int key);
    void mirrorImage(node* root);
    int height(node*);
    void minimum();
};

void bst::create() {
    node* curr, * temp;
    int ans = 1;
    cout << "Enter data: ";
    do {
        curr = new node;
        cin >> curr->data;
        curr->left = curr->right = NULL;
        if (root == NULL) {
            root = curr;
        }
        else {
            temp = root;
            while (true) {
                if (curr->data <= temp->data) {
                    if (temp->left == NULL) {
                        temp->left = curr;
                        break;
                    }
                    else {
                        temp = temp->left;
                    }
                }
                else {
                    if (temp->right == NULL) {
                        temp->right = curr;
                        break;
                    }
                    else {
                        temp = temp->right;
                    }
                }
            }
        }
        cout << "Want to continue (1/0): ";
        cin >> ans;
    } while (ans == 1);
}

void bst::inorder(node* root) {
    if (root != NULL) {
        inorder(root->left);
        cout << " " << root->data;
        inorder(root->right);
    }
}

void bst::preorder(node* root) {
    if (root != NULL) {
        cout << " " << root->data;
        preorder(root->left);
        preorder(root->right);
    }
}

void bst::postorder(node* root) {
    if (root != NULL) {
        postorder(root->left);
        postorder(root->right);
        cout << " " << root->data;
    }
}

void bst::insert() {
    node* curr, * temp;
    int ans = 1;
    cout << "Enter data: ";
    curr = new node;
    cin >> curr->data;
    curr->left = curr->right = NULL;
    if (root == NULL) {
        root = curr;
    }
    else {
        temp = root;
        while (true) {
            if (curr->data <= temp->data) {
                if (temp->left == NULL) {
                    temp->left = curr;
                    break;
                }
                else {
                    temp = temp->left;
                }
            }
            else {
                if (temp->right == NULL) {
                    temp->right = curr;
                    break;
                }
                else {
                    temp = temp->right;
                }
            }
        }
    }
}

void bst::search(int key) {
    node* curr;
    curr = root;
    while (curr != NULL) {
        if (curr->data == key) {
            cout << "Found";
            break;
        }
        else {
            if (key < curr->data) {
                curr = curr->left;
            }
            else {
                curr = curr->right;
            }
        }
    }
    if (curr == NULL) {
        cout << "Not found";
    }
}

int bst::height(node* root) {
    if (root == NULL) {
        return 0;
    }
    else {
        if (height(root->right) > height(root->left)) {
            return (1 + height(root->right));
        }
        else {
            return (1 + height(root->left));
        }
    }
}

void bst::minimum() {
    node* temp;
    int min;
    temp = root;
    while (temp->left != NULL) {
        min = temp->data;
        temp = temp->left;
        if (temp->data < min) {
            min = temp->data;
        }
        else {
            temp = temp->left;
        }
    }
    cout << "Minimum number is: " << min;
}

void bst::mirrorImage(node* root) {
    if (root == NULL) {
        return;
    }
    node* temp = root->left;
    root->left = root->right;
    root->right = temp;
    mirrorImage(root->left);
    mirrorImage(root->right);
}

int main() {
    bst b;
    int key, ch;
    do {
        cout << "\n1. Create\n2. Insert\n3. Inorder\n4. Preorder\n5. Postorder\n6. Search\n7. Minimum\n8. Mirror Image\n9. Height\nPress 0 to exit\n";
        cout << "Enter your choice: ";
        cin >> ch;
        switch (ch) {
        case 1:
            b.create();
            break;
        case 2:
            b.insert();
            break;
        case 3:
            cout << "Inorder traversal is: ";
            b.inorder(b.root);
            cout << endl;
            break;
        case 4:
            cout << "Preorder traversal is: ";
            b.preorder(b.root);
            cout << endl;
            break;
        case 5:
            cout << "Postorder traversal is: ";
            b.postorder(b.root);
            cout << endl;
            break;
        case 6:
            cout << "Enter key to search: ";
            cin >> key;
            b.search(key);
            cout << endl;
            break;
        case 7:
            b.minimum();
            cout << endl;
            break;
        case 8:
            b.mirrorImage(b.root);
            cout << "Mirror Image created successfully." << endl;
            break;
        case 9:
            cout << "Height of the tree is: " << b.height(b.root) << endl;
            break;
        }
    } while (ch != 0);

    return 0;
}
